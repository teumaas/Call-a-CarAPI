{
  "swagger": "2.0",
  "info": {
    "description": "This is the REST API documentation for the Call-a-Car project done by Tom Smits and Tom Schoonbeek. In every request an `Authorization: ` token is used to make a request on the API. To get a key use `/users/login`",
    "version": "1.0.0",
    "title": "Swagger Call-a-Car",
    "contact": {
      "email": "tje.smits@student.avans.nl"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "localhost:4000",
  "basePath": "/api",
  "tags": [
    {
      "name": "users",
      "description": "Everything about your Pets"
    }
  ],
  "schemes": ["http"],
  "paths": {
    "/users": {
      "get": {
        "tags": ["users"],
        "summary": "Create user",
        "description": "This can only be done by the logged in user.",
        "operationId": "createUser",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/createWithArray": {
      "post": {
        "tags": ["users"],
        "summary": "Creates list of users with given input array",
        "description": "",
        "operationId": "createUsersWithArrayInput",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "List of user object",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/createWithList": {
      "post": {
        "tags": ["users"],
        "summary": "Creates list of users with given input array",
        "description": "",
        "operationId": "createUsersWithListInput",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "List of user object",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/login": {
      "get": {
        "tags": ["users"],
        "summary": "Logs user into the system",
        "description": "",
        "operationId": "loginUser",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "The user name for login",
            "required": true,
            "type": "string"
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password for login in clear text",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            },
            "headers": {
              "X-Rate-Limit": {
                "type": "integer",
                "format": "int32",
                "description": "calls per hour allowed by the user"
              },
              "X-Expires-After": {
                "type": "string",
                "format": "date-time",
                "description": "date in UTC when token expires"
              }
            }
          },
          "400": {
            "description": "Invalid username/password supplied"
          }
        }
      }
    },
    "/user/logout": {
      "get": {
        "tags": ["users"],
        "summary": "Logs out current logged in user session",
        "description": "",
        "operationId": "logoutUser",
        "produces": ["application/xml", "application/json"],
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/{username}": {
      "get": {
        "tags": ["users"],
        "summary": "Get user by user name",
        "description": "",
        "operationId": "getUserByName",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be fetched. Use user1 for testing. ",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "tags": ["users"],
        "summary": "Updated user",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "name that need to be updated",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid user supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "tags": ["users"],
        "summary": "Delete user",
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteUser",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    }
  },
  "securitySchemes": {
    "petstore_auth": {
      "type": "oauth2",
      "authorizationUrl": "http://petstore.swagger.io/oauth/dialog",
      "flow": "implicit",
      "scopes": {
        "write:pets": "modify pets in your account",
        "read:pets": "read your pets"
      }
    },
    "api_key": {
      "type": "apiKey",
      "name": "api_key",
      "in": "header\"he"
    }
  },
  "definitions": {
    "User": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "format": "hexadecimal"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "shareData": {
          "type": "boolean"
        },
        "roles": {
          "type": "string",
          "description": "Defines the user permissions role.",
          "enum": ["user", "admin"]
        },
        "phoneNumber": {
          "type": "string"
        },
        "zipCode": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "created": {
          "type": "string",
          "format": "date"
        },
        "resetPasswordToken": {
          "type": "string"
        },
        "resetPasswordExpires": {
          "type": "string",
          "format": "date"
        }
      }
    },
    "Ride": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "format": "hexadecimal"
        },
        "car": {
          "type": "string",
          "format": "hexadecimal"
        },
        "person": {
          "type": "string",
          "format": "hexadecimal"
        },
        "dateTime": {
          "type": "string",
          "format": "date"
        },
        "distanceInKm": {
          "type": "integer",
          "format": "double",
          "default": 0
        },
        "status": {
          "type": "string",
          "description": "The status of the orderd ride.",
          "enum": [
            "Pending",
            "Driving to customer",
            "Transporting customer",
            "Complete",
            "Canceled"
          ]
        },
        "paymentFulfilled": {
          "type": "boolean",
          "default": false
        },
        "pickupAddress": {
          "type": "string"
        },
        "pickupZipcode": {
          "type": "boolean"
        },
        "destinationAddress": {
          "type": "string"
        },
        "destinationZipcode": {
          "type": "string"
        },
        "isLocked": {
          "type": "boolean",
          "default": true
        }
      }
    },
    "Incident": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "format": "hexadecimal"
        },
        "description": {
          "type": "string"
        },
        "amountOfPassengers": {
          "type": "integer",
          "format": "int32"
        },
        "date": {
          "type": "string",
          "format": "date"
        }
      }
    },
    "Car": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "format": "hexadecimal"
        },
        "model": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "format": "hexadecimal"
        },
        "entryDate": {
          "type": "string",
          "format": "date"
        }
      }
    },
    "CarType": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "format": "hexadecimal"
        },
        "typeName": {
          "type": "string"
        },
        "pricePerKm": {
          "type": "integer",
          "format": "double"
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  }
}
